{
	"name": "dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "src_dataflow",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sink_dataflow",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "selectColumns"
				},
				{
					"name": "filterColumn"
				},
				{
					"name": "splitColumns"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transaction_id as short,",
				"          transactional_date as timestamp,",
				"          product_id as string,",
				"          customer_id as short,",
				"          payment as string,",
				"          credit_card as long,",
				"          loyalty_card as boolean,",
				"          cost as double,",
				"          quantity as short,",
				"          price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          transaction_id,",
				"          transactional_date,",
				"          product_id,",
				"          customer_id,",
				"          payment,",
				"          price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"selectColumns filter(customer_id != 12) ~> filterColumn",
				"filterColumn split(payment == 'visa',",
				"     payment == 'mastercard',",
				"     disjoint: false) ~> splitColumns@(visa, mastercard, amex)",
				"splitColumns@amex derive(payment = coalesce(payment, 'N/A')) ~> derivedColumn1",
				"splitColumns@visa aggregate(groupBy(customer_id),",
				"     product_id = max(product_id)) ~> aggregate1",
				"aggregate1 alterRow(insertIf('JG'=='JG')) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0002,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}